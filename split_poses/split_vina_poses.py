'''
Author: Dr. Muniba Faiza
Copyright Muniba Faiza 2024
License GPL-2.0

'''

'''
This Python script splits poses of Vina docked file.

USAGE:

python3 split_poses.py

'''


#!/usr/bin/env python3

import os
from pymol import cmd
import shutil


def display_info():
    banner = """
    
                ============================================================

                
                \ \ / // __| ___   /_\   _ _   __ _ | | _  _  ___(_) ___
                 \ V / \__ \|___| / _ \ | ' \ / _` || || || |(_-<| |(_-<
                  \_/  |___/     /_/ \_\|_||_|\__,_||_| \_, |/__/|_|/__/
                                                        |__/                    

                Python package for Virtual Screening Result Analysis
"""
    info = """
##############################################################
#                                                            #
#                        split_poses.py                      #
#                                                            #
##############################################################
# This Python script is designed to automate the process of  #
# splitting and saving molecular docking poses generated by  #
# AutoDock Vina from multiple .pdbqt output files. The script#
# leverages the PyMOL molecular visualization tool to load,  #
# split, and save the poses into separate PDB files.         #
#                                                            #
# It requires Vina output .pdbqt files as input and generates #
# split poses in an output folder. This output folder is     #
# named after the parent folder containing all the docking   #
# files. For each docking file, the script creates a         #
# corresponding subfolder within the parent folder to store   #
# the split poses.                                           #
#                                                            #
# Author: Dr. Muniba Faiza                                   #
# Bioinformatics Review                                      #
#                                                            #
##############################################################

    """
    print(banner)
    print(info)


def cite_info():

	cite_info= """

    ##############################################################
    # HOW TO CITE:                                               #
    #                                                            #
    # 1. Faiza M., (2024). How to fix broken Vina Docked output  #
    # in DS Visualizer: A step-bystep guide 10(8):               #
    # page 12-16. The article is available at                    #
    # https://bioinformaticsreview.com/20240830/how-to-fix-      #
    # broken-vina-docked-output-in-ds-visualizer-a-step-by-      #
    # step-guide/                                             #
    #                                                            #
    # 2. Faiza, M., (2024). VS_Analysis: A Python package to     #
    # perform post-virtual screening analysis, 10(1): page 8-12. #
    # https://bioinformaticsreview.com/20240110/vs_analysis-a-   #
    # python-package-to-perform-post-virtual-screening-analysis/ #
    ##############################################################

"""
	print(cite_info)
	

display_info()


def split_vina_poses(base_folder):
    # List all immediate subdirectories in the base folder
    for folder_name in os.listdir(base_folder):
        folder_path = os.path.join(base_folder, folder_name)

        # Check if the path is a directory
        if os.path.isdir(folder_path):
            # Print a prominent processing folder message
            print(f"\n{'='*60}")
            print(f"Processing folder: {folder_path}")
            print(f"{'='*60}\n")

            # Define the output folder for split poses inside the current folder
            output_folder = os.path.join(folder_path, f"{folder_name}_poses")

            # Remove the existing poses folder if it exists
            if os.path.isdir(output_folder):
                print(f"\nRemoving existing poses folder: {output_folder}\n")
                shutil.rmtree(output_folder)

            # Create a new folder to save the split poses
            os.makedirs(output_folder, exist_ok=True)
            print(f"\nOutput folder created: {output_folder}\n")  # Debugging statement

            # Process each file in the current folder
            for file_name in os.listdir(folder_path):
                if file_name.endswith(".pdbqt"):  # Check if the file is a Vina output file
                    print(f"\nProcessing file: {file_name}")  # Debugging statement
                    file_path = os.path.join(folder_path, file_name)
                    output_prefix = os.path.splitext(file_name)[0]

                    # Load the file in PyMOL
                    cmd.load(file_path, output_prefix)

                    # Split poses into separate objects
                    split_prefix = f"{output_prefix}_pose"
                    cmd.split_states(output_prefix, prefix=split_prefix)

                    # Check how many objects were created
                    object_names = cmd.get_object_list()
                    print(f"\nObjects created: {object_names}")  # Debugging statement

                    # Save each pose as a separate PDB file with folder and file name in the header
                    for i in range(1, len(object_names) + 1):
                        object_name = f"{output_prefix}_pose{i:04}"
                        output_path = os.path.join(output_folder, f"{object_name}.pdb")

                        if object_name not in object_names:
                            print(f"Object {object_name} not found. Skipping.")
                            continue

                        # Save the pose to the PDB file
                        cmd.save(output_path, object_name)

                    # Delete the original loaded object to save memory
                    cmd.delete(output_prefix)
                    cmd.delete("all")  # Clear all objects to avoid conflicts with next files




if __name__ == "__main__":
    # Change this to the directory where all the folders are located
    base_folder = os.path.abspath(os.getcwd())

    # Initialize PyMOL without GUI (if running the script outside of PyMOL)
    cmd.reinitialize()

    # Run the pose splitting
    split_vina_poses(base_folder)

    # Finish up
    print("Pose splitting complete.")

    cite_info()
